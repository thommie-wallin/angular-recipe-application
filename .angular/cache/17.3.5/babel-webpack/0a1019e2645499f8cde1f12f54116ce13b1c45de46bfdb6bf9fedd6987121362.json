{"ast":null,"code":"import { Breakpoints } from '@angular/cdk/layout';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"../core/services/data.service\";\nimport * as i2 from \"@angular/cdk/layout\";\nimport * as i3 from \"@angular/material/grid-list\";\nimport * as i4 from \"./mealtype-select/mealtype-select.component\";\nimport * as i5 from \"./recipe-list/recipe-list.component\";\nimport * as i6 from \"./allergene-select/allergene-select.component\";\nimport * as i7 from \"./diet-select/diet-select.component\";\nexport let RecipesComponent = /*#__PURE__*/(() => {\n  class RecipesComponent {\n    constructor(dataService, breakpointObserver) {\n      this.dataService = dataService;\n      this.breakpointObserver = breakpointObserver;\n      this.mealtype = '';\n      this.allergene = '';\n      this.diet = '';\n      this.gridByBreakpoint = {\n        xl: 3,\n        lg: 3,\n        md: 3,\n        sm: 2,\n        xs: 1\n      };\n    }\n    ngOnInit() {\n      // Angular Material Component Dev Kit (CDK): Layout behaviour primitives with Material Designs breakpoint system. \n      // The breakpointobserver utility with the observe method evaluate default media queries from the breakpoint system \n      // which will emit when one of them changes its boolean value. If a media query emits a boolean value of true, the different\n      // if statements check which media querys condition is truthy. Then the cols variable is set to a corresponding number \n      // value from the gridByBreakpoint object.\n      this.breakpointObserver.observe([Breakpoints.XSmall, Breakpoints.Small, Breakpoints.Medium, Breakpoints.Large, Breakpoints.XLarge]).subscribe(result => {\n        if (result.matches) {\n          if (result.breakpoints[Breakpoints.XSmall]) {\n            this.cols = this.gridByBreakpoint.xs;\n          }\n          if (result.breakpoints[Breakpoints.Small]) {\n            this.cols = this.gridByBreakpoint.sm;\n          }\n          if (result.breakpoints[Breakpoints.Medium]) {\n            this.cols = this.gridByBreakpoint.md;\n          }\n          if (result.breakpoints[Breakpoints.Large]) {\n            this.cols = this.gridByBreakpoint.lg;\n          }\n          if (result.breakpoints[Breakpoints.XLarge]) {\n            this.cols = this.gridByBreakpoint.xl;\n          }\n        }\n      });\n    }\n    // Receive selected value from mealtype-select-component\n    receiveMealTypeMessage($event) {\n      this.mealtype = $event;\n      // If selected value is not 'None'\n      if (this.mealtype !== 'None') {\n        this.recipes = this.dataService.getRecipesBySelected(this.mealtype, this.allergene, this.diet);\n      }\n    }\n    // Receive selected value from allergene-select-component\n    receiveAllergeneMessage($event) {\n      this.allergene = $event;\n      // If selected value is not 'None'\n      if (this.allergene !== 'None') {\n        this.recipes = this.dataService.getRecipesBySelected(this.mealtype, this.allergene, this.diet);\n      }\n    }\n    // Receive selected value from diet-select-component\n    receiveDietMessage($event) {\n      this.diet = $event;\n      // If selected value is not 'None'\n      if (this.diet !== 'None') {\n        this.recipes = this.dataService.getRecipesBySelected(this.mealtype, this.allergene, this.diet);\n      }\n    }\n    static #_ = this.ɵfac = function RecipesComponent_Factory(t) {\n      return new (t || RecipesComponent)(i0.ɵɵdirectiveInject(i1.DataService), i0.ɵɵdirectiveInject(i2.BreakpointObserver));\n    };\n    static #_2 = this.ɵcmp = /*@__PURE__*/i0.ɵɵdefineComponent({\n      type: RecipesComponent,\n      selectors: [[\"app-recipes\"]],\n      decls: 12,\n      vars: 5,\n      consts: [[1, \"grid-container\"], [1, \"mat-h1\"], [\"rowHeight\", \"3:1\", 3, \"cols\"], [3, \"colspan\"], [3, \"messageEvent\"], [1, \"list-content\"], [3, \"recipes\"]],\n      template: function RecipesComponent_Template(rf, ctx) {\n        if (rf & 1) {\n          i0.ɵɵelementStart(0, \"div\", 0)(1, \"h1\", 1);\n          i0.ɵɵtext(2, \"Recipes\");\n          i0.ɵɵelementEnd();\n          i0.ɵɵelementStart(3, \"mat-grid-list\", 2)(4, \"mat-grid-tile\", 3)(5, \"app-mealtype-select\", 4);\n          i0.ɵɵlistener(\"messageEvent\", function RecipesComponent_Template_app_mealtype_select_messageEvent_5_listener($event) {\n            return ctx.receiveMealTypeMessage($event);\n          });\n          i0.ɵɵelementEnd()();\n          i0.ɵɵelementStart(6, \"mat-grid-tile\", 3)(7, \"app-allergene-select\", 4);\n          i0.ɵɵlistener(\"messageEvent\", function RecipesComponent_Template_app_allergene_select_messageEvent_7_listener($event) {\n            return ctx.receiveAllergeneMessage($event);\n          });\n          i0.ɵɵelementEnd()();\n          i0.ɵɵelementStart(8, \"mat-grid-tile\", 3)(9, \"app-diet-select\", 4);\n          i0.ɵɵlistener(\"messageEvent\", function RecipesComponent_Template_app_diet_select_messageEvent_9_listener($event) {\n            return ctx.receiveAllergeneMessage($event);\n          });\n          i0.ɵɵelementEnd()()();\n          i0.ɵɵelementStart(10, \"div\", 5);\n          i0.ɵɵelement(11, \"app-recipe-list\", 6);\n          i0.ɵɵelementEnd()();\n        }\n        if (rf & 2) {\n          i0.ɵɵadvance(3);\n          i0.ɵɵproperty(\"cols\", ctx.cols);\n          i0.ɵɵadvance();\n          i0.ɵɵproperty(\"colspan\", 1);\n          i0.ɵɵadvance(2);\n          i0.ɵɵproperty(\"colspan\", 1);\n          i0.ɵɵadvance(2);\n          i0.ɵɵproperty(\"colspan\", 1);\n          i0.ɵɵadvance(3);\n          i0.ɵɵproperty(\"recipes\", ctx.recipes);\n        }\n      },\n      dependencies: [i3.MatGridList, i3.MatGridTile, i4.MealtypeSelectComponent, i5.RecipeListComponent, i6.AllergeneSelectComponent, i7.DietSelectComponent],\n      styles: [\".grid-container[_ngcontent-%COMP%]{margin:20px}@media screen and (max-width: 425px){.grid-container[_ngcontent-%COMP%]{margin:0}}\"]\n    });\n  }\n  return RecipesComponent;\n})();","map":null,"metadata":{},"sourceType":"module","externalDependencies":[]}